Network composition

    - This file describes the core components and composite structures of intercast networking
      and details their declarative basis in the waycast.


    ━━━━━━━━━━━━━
     Appointment
    ─────────────
        - A role offer declared one waycast (superior) and its acceptance declared another (inferior).
            - The role name given in the acceptance must match that given in the offer.
        - Appointments serve to interrelate the members of executive systems.

        ────────────
         role offer
        ┈┈┈┈┈┈┈┈┈┈┈┈
            / A waycast parameterizer.
            - The superior half of an appointment, declared in the superior waycast.
            - Each role offer formalizes an offer of appointment to a role.
                - Together with a role acceptance, it serves to form an appointment.
                - In advance of any acceptance, it may serve to:
                    ⁃ Recruit an agent or team member by formally soliciting acceptance
                        : see e.g. `^^- By means of the open appointment offer` @ `^^ Teams and agents` @
                          external_fit_and_internal_form.brec
                    ⁃ Utilize a resource of a foreign executive system
                        : see e.g. `^^- By means of the open appointment offer` @ `^^ Teams and agents` @
                          external_fit_and_internal_form.brec
            - A role offer is declared using a waycast parameter in this form:

                  ╶──╴‘<role offer>’╶── P ── role name ── P ── URI ───▶
                 
                         ┊
                         └─ <portfolio> *

                    diagram, The form of the waycast parameter in a role offer,
                      together with the typifier of its allowed parametric child.
                        / ‘*’ indicates an optional parametric child

            - The URI locates the inferior waycast.  It must not be an instance of the present waycast.

            role name

                     ┌─╴◀───╴‘ ’╶──┐
                     │             │
                  ╶──┴─── term ────┴───▶

            portfolio assignment
                / A waycast parameterizer, child of a role offer.
                - It assigns a portfolio to the offered role.
                - Declared as a role-offer child, it has a waycast parameter in this form:

                      ╶──╴‘<portfolio>’╶──┬── P ── description ──┬───▶
                                          │                      │
                                          └──────────────────────┘

                - The description component is free in form, and describes the portfolio.


        ─────────────────
         role acceptance
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            / A waycast parameterizer.
            - The inferior half of an appointment, declared in the inferior waycast.
                : see e.g. `^^ii\.$` @ `^^diagram, Approach to action.+coordinating with others` @
                  `^^ Teams and agents` @ external_fit_and_internal_form.brec
            - Each role acceptance formalizes acceptance of appointment to a role.
                - Together with a role offer, it serves to form an appointment.
                - In advance of any offer, it serves to formally solicit an offer.
                    : see e.g. `^^ii\.$` @ `^^diagram, Approach to action.+coordinating with others` @
                      `^^ Teams and agents` @ external_fit_and_internal_form.brec
                    : see e.g. `^^diagram, Approach to action.+the case of a foreign agent` @
                      `^^ Teams and agents` @ external_fit_and_internal_form.brec
            - A role acceptance is declared using a waycast parameter in this form:

                  ╶──╴‘<role acceptance>’╶── P ── role name ── P ── URI ───▶
                 
                         ┊
                         └─ <portfolio> *

                    diagram, The form of the waycast parameter in a role acceptance,
                      together with the typifier of its allowed parametric child.
                        / ‘*’ indicates an optional parametric child

            - The URI locates the superior waycast.  It must not be an instance of the present waycast.

            portfolio definition
                / A waycast parameterizer, child of a role acceptance.
                - It specifies a set of way files that pertain to the accepted role.
                    \ Way files are the only means at present to formally define a portfolio.
                - Declared as a role-acceptance child, it has a waycast parameter in this form:

                                                   parameter
                      ╶──╴‘<portfolio>’╶──┬── P ──╴  value  ╶──┬───▶
                                          │                    │
                                          └────────────────────┘
                        : re `(parameter).*\R.*(value)`
                          see `^^parameter value$` @ `^^ Waycast parameterizer$` @
                          http://reluk.ca/project/wayic/Waybrec/language_definition.brec

                - The terms and patterns of the parameter value specify the way files by their paths.
                - The portfolio definition is without effect if no portfolio was assigned.
                    : re `assigned` see `^^portfolio assignment$`



    ━━━━━━━━
     Forest
    ────────
        - An ordered set of trees.
        - Forests serve to order the resources of an intercast network for purposes of surveyance,
          search and discovery.
        - The trees of a forest are ordered, by default, according to the descendant weight
          at their roots.
        tree
            - An ordered, cyclic in-tree.
                / Re in-tree, aka anti-arborescence.
            - Trees are potentially cyclic in that the root of each comprises either a node or cycle.
            - The unit weight of each node is one, except where defined otherwise.
            - Sibling nodes are ordered, by default, according to their descendant weights.



    ━━━━━━━━━━━━━━━━━━
     Waysource forest
    ──────────────────
        - A forest of waysource variants at a particular locus interconnected by taps.
        - It serves to order the variants for purposes of surveyance, search and discovery.
        - Each node of the forest is backed by a separate instance of the waysource located in a waycast.
            - Where a waycast contributes multiple nodes to the forest, the sum of their unit weights
              must equal one.
                / A waycast may contribute multiple nodes to: a) a way-file forest via path bridging;
                  b) a goal forest via multiple thoroughfracta; or c) any forest via intracast taps,
                  though here the nodes would be weightless anyway.
            - Where the backing instance of a node is an intracast tap stand, the node is assigned
              a unit weight of zero.
                - A tap between separate instances of the same waycast is considered an intracast tap
                  for this purpose.
            / So the descendant weights (which by default order the forest) will accord
              with the popularity of the variant clades as measured by their actual use.
        - Each edge is backed by a waysource tap, and directed from stand to stock.
        - Isolated instances of waysource at the locus — those which are unconnected by any tap —
          each appear in the forest as a tree of a single node.
            / So waysource introduced to a novel locus, whether by origination or relocation,
              gains early representation.
        goal forest
            / A type of waysource forest.
            - A forest of variant thoroughfractal heads interconnected by their taps.
                : see e.g. `^^diagram, A goal forest` @ external_fit_and_internal_form.brec
            - Its functions include surveyance, search and discovery of:
                ⁃ Final or endmost goals
                    / What goals have others chosen?  What are the alternatives out there
                      and how do they relate to each other?
                ⁃ Ways to reach a goal
                    / How can this goal be reached?  Who is trying to reach it?
                      What ways have they chosen?  How are they organized?
                    : see e.g. `^^diagram.+user orientation by final or endmost goal and executive means`
                      @ `^^ Goal forest` @ external_fit_and_internal_form.brec
        way-file forest
            / A type of waysource forest.
            - A forest of way-file variants at a particular proper path interconnected by their taps.
                : see e.g. `^^diagram, A way-file forest` @ external_fit_and_internal_form.brec
            - Its functions include surveyance, search and discovery of:
                ⁃ Variant way files
                    / What do other waycasters have in this file?  What are the variants out there
                      and how do they relate to each other?
                ⁃ Teams and agents
                    / In whose portfolio is this way file?  Who is doing the work here?
                      Who is executing this part of the plan?
                    : see e.g. `^^diagram, How.+find.+candidate.+agents for a way part` @
                      `^^ Teams and agents` @ external_fit_and_internal_form.brec
            - Whether or not path bridges transfer descendant weight to the forest
              (or whether it even includes them) depends on the forest implementation.



    ━━━━━━━━━━━━━━━
     Waysource tap
    ───────────────
        / A waycast parameterizer.
        - A tap between two instances of waysource, typically located in separate waycasts.
        - Waysource taps serve to:
            (a) Maintain variant instances of waysource
            (b) Place instances of waysource in a forest where they may be discovered
                : re `forest` see `^^ Waysource forest$`
        - A waysource tap declared with a `stopped` qualifier loses the functions inherent to a tap
          except where they are explicitly commanded.
                / E.g. (a) variant maintenance is lost except where commanded.
            - Any additional function attached to the tap is unaffected.
                / E.g. (b) placement in a waysource forest is unaffected.

        ──────────────────────────
         thoroughfractal head tap
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            / A type of waysource tap.
                : see e.g. `^^diagram.+variant goal.+explicitly declared.+\R.+in a file stand` @
                  `^^ Goal forest` @ external_fit_and_internal_form.brec
                : see e.g. `^^diagram.+variant goal.+explicitly declared.+\R.+in an original file` @
                  `^^ Goal forest` @ external_fit_and_internal_form.brec
            - A thoroughfractal head tap may serve to:
                ⁃ Maintain a variant form of final or endmost goal
                ⁃ Place one’s goal in a forest where it may be discovered
                    : re `forest` see `^^goal forest$`
            - It is declared as a waycast parameterizer with a parameter in this form:

                  ╶──╴‘<head tap>’╶── P ──┬──╴‘stopped’╶── P ──┬── fractum indicant ───▶
                                          │                    │
                                          └────────────────────┘

                    diagram, The form of the waycast parameter in a thoroughfractal head tap.

            - A `non-fractal` qualifier must not appear in the fractum indicant.
            stand
                - The tap stand is the head of the parent.
                - The parent must be marked as a thoroughfractum.
                    : re `marked` see e.g. `^^ Thoroughfractum designator$` @
                      http://reluk.ca/project/wayic/Waybrec/language_definition.brec
            stock
                - The stock is determined from the indicated fractum, which must lie in a waycast
                  and be either a thoroughfractum or file fractum.
                        : re `indicated fractum` see `^^indicated fractum` @ `^^ Fractum indicant$` @
                          http://reluk.ca/project/Breccia/language_definition.brec
                    • thoroughfractum
                        - Where a thoroughfractum is indicated, the stock is its head.
                    • file fractum
                        - Where a file fractum is indicated, it must contain a single thoroughfractum
                          and the stock is its head.


        ──────────────
         way-file tap
        ┈┈┈┈┈┈┈┈┈┈┈┈┈┈
            / A type of waysource tap.
                : see e.g. `^^diagram, Change flow from extracast sources` @ `^^ Taps and pipes` @
                  external_fit_and_internal_form.brec
            - A way-file tap may serve to:
                ⁃ Maintain a variant way file
                ⁃ Place a way file in a forest where it may be discovered
                    : re `forest` see `^^way file forest$`
            - It is declared as a waycast parameterizer with a parameter in this form:

                  ╶──╴‘<body tap>’╶── P ──┬──╴‘stopped’╶── P ──┬── URI reference ───▶
                                          │                    │
                                          └────────────────────┘
                    : re `URI reference` see https://tools.ietf.org/html/rfc3986#section-4.1
                    diagram, The form of the waycast parameter in a way-file tap.

            stand
                - The tap stand is the body of the parent.
                - The parent must be a file fractum.

            stock
                - The stock is determined from the URI reference, which must resolve to a way file
                  located in a waycast.
                - The stock is its file fractum.



                                                         \ Copyright © 2021  Michael Allan.  Licence MIT.
